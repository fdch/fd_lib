#N canvas 500 50 530 480 12;
#X declare -lib fd_lib;
#X obj 4 4 cnv 15 522 30 empty empty "mainpath" 20 15 0 15 -228856
-1 0;
#X obj 4 254 cnv 15 522 20 empty empty arguments: 10 10 0 14 -228856
-1 0;
#X obj 4 314 cnv 15 522 20 empty empty inlets: 10 10 0 14 -228856 -1
0;
#X obj 4 374 cnv 15 522 20 empty empty outlets: 10 10 0 14 -228856
-1 0;
#X obj 4 453 cnv 15 522 20 empty empty version 10 10 0 14 -228856 -1
0;
#X obj 380 8 declare -lib fd_lib;
#N canvas 0 22 450 300 meta 0;
#X restore 438 423 pd meta;
#X text 440 452 fd_lib v0.1;
#X text 60 284 1 arguments;
#X text 60 340 2 inlets;
#X text 60 410 1 outlets;
#N canvas 541 191 565 498 file 0;
#X obj 33 286 mainpath;
#X msg 33 83 getfiles;
#X text 113 82 <-- Outputs all files in current directory;
#X msg 43 117 getpdfiles;
#X text 135 114 <-- Outputs all ".pd" files in current directory,
f 38;
#X text 53 32 Some utilities to get files in the current or given directory
;
#X obj 33 449 print file;
#X text 52 164 Here we change directory and open an image:;
#X text 157 452 used in "navigator.pd" and "fd_getfiles-help.pd";
#X msg 83 237 bang;
#X text 127 239 <-- Note that unless you send a symbol via cold inlet
or abstraction \, the directory will not change., f 47;
#X text 83 11 FILE STUFF: (get files \, pd-files \, open);
#X obj 274 380 mainpath ..;
#X msg 274 303 getfiles;
#X msg 291 344 getpdfiles;
#X text 206 185 <-- outputs a bang if successfull and then opens a
specified file in its default app, f 38;
#X msg 55 186 open ../doc/img/88.jpg;
#X connect 0 0 6 0;
#X connect 1 0 0 0;
#X connect 3 0 0 0;
#X connect 9 0 0 0;
#X connect 12 0 6 0;
#X connect 13 0 12 0;
#X connect 14 0 12 0;
#X connect 16 0 0 0;
#X restore 252 176 pd file stuff;
#N canvas 0 22 450 300 erratum 0;
#X text 36 57 NOTE: Compiled for mac \, don't know if it will work
in linux or windows. It is simply "canvas_getcurrentdir()" with some
twists. It also uses <dirent.h>, f 40;
#X obj 169 196 pdcontrol;
#X text 40 156 this object can be replaced by new vanilla object:;
#X text 61 238 (with the exception of 'getfiles' message...);
#X restore 373 170 pd erratum;
#N canvas 0 22 450 300 argument 0;
#X msg 125 69 bang;
#X obj 125 135 print -n;
#X obj 125 103 mainpath subdir;
#X text 91 48 Optional argument:;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X restore 252 199 pd argument;
#N canvas 489 35 528 380 messages 0;
#X msg 47 26 bang;
#X msg 93 161 symbol ..;
#X obj 47 307 mainpath;
#X msg 118 186 symbol ../..;
#X text 91 26 <-- Outputs the current directory (symbol);
#X msg 128 213 symbol subdir/inside/another/subdirectory;
#X msg 61 65 add myfile.ps;
#X text 171 65 <-- "add" a filename to the end (symbol);
#X text 222 187 <-- goes back two directories;
#X text 178 161 <-- goes back one directory;
#X text 87 118 Cold inlet / Argument --> relative directory:;
#X obj 47 332 print -n;
#X msg 141 251 reset;
#X text 195 252 <-- removes stored relative directories;
#X text 85 138 Use 'bang' \, 'add' or 'prepend' after these:;
#X connect 0 0 2 0;
#X connect 1 0 2 1;
#X connect 2 0 11 0;
#X connect 3 0 2 1;
#X connect 5 0 2 1;
#X connect 6 0 2 0;
#X connect 12 0 2 0;
#X restore 252 153 pd messages;
#X obj 38 167 mainpath;
#X obj 38 192 print;
#X msg 38 114 bang;
#X text 17 53 Handles path relative to the containing patch. It acts
like [ggee/getdir] and [tof/path] \, but with a twist. Some messages
are 'read' \, 'open' \, 'write' \, 'print';
#X msg 99 123 read;
#X connect 15 0 16 0;
#X connect 17 0 15 0;
#X connect 19 0 15 0;
