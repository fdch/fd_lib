#N canvas 525 47 594 587 12;
#X obj 88 75 back define mydata;
#N canvas 527 53 661 451 s 0;
#X msg 25 40 \; mydata shape oval 100 100 200 200;
#X msg 25 200 \; mydata shape line 100 100 200 200;
#X text 49 10 This creates temporary and uneditable shapes;
#X msg 27 400 mydata vis 1 \, text 10 10 sometext;
#X msg 25 120 \; mydata shape rectangle 200 200 300 300 200;
#X msg 25 292 \; mydata shape polygon 100 100 200 200;
#X text 51 260 not working;
#X text 51 371 crashes on some systems:;
#X msg 365 239 \; mydata vis 0 \, vis 1;
#X text 357 207 re-vising the canvas erases it;
#X msg 366 321 \; mydata delete;
#X text 363 290 also this will delete temp shapes;
#X restore 318 177 pd s temporary shapes;
#N canvas 525 52 640 702 s 0;
#X obj 65 547 r itpoint;
#X msg 87 588 clear;
#X obj 65 621 fd_list-pointer;
#X floatatom 382 490 5 0 0 0 change_color - -, f 5;
#X msg 80 240 \; mydata flush itpoint;
#X obj 94 489 hradio 15 1 0 8 empty empty empty 0 -8 0 10 -262144 -1
-1 5;
#X msg 81 81 \; mydata send itpoint;
#X text 278 265 (It will post how many it found);
#X floatatom 94 513 5 0 0 0 index - -, f 5;
#X text 108 53 "send";
#X text 104 218 "flush";
#X text 241 79 <-- sends 'head of the list' pointer (aka traverse)
to <target>, f 36;
#X text 247 247 <-- sends ALL found pointers to <target>;
#X text 150 547 <-- <target> is this;
#X text 197 623 <-- store pointers;
#X text 212 16 Access the data pointers;
#X text 137 653 (see fd_list-pointer-help);
#X text 132 587 <-- must flush again afterwards;
#X obj 382 641 set mydata rgb;
#N canvas 488 196 450 300 s 0;
#X obj 16 22 inlet;
#X obj 50 178 s append-some-stuff;
#X obj 50 114 until;
#X msg 120 105 \; itpoint clear \; mydata clear \, delete \, send head-pointer
;
#X obj 16 47 t b b b;
#X msg 50 89 8;
#X text 166 78 first we clear everything;
#X text 213 175 <-- then we draw;
#X text 48 221 then we sort and flush;
#X msg 16 241 \; mydata sort \, flush itpoint;
#X obj 83 27 r append-stuff;
#X connect 0 0 4 0;
#X connect 2 0 1 0;
#X connect 4 0 9 0;
#X connect 4 1 5 0;
#X connect 4 2 3 0;
#X connect 5 0 2 0;
#X connect 10 0 4 0;
#X restore 84 394 pd s append-some-stuff;
#X msg 84 344 bang;
#X text 136 343 [1] bang until you have some visible shapes);
#X text 272 392 <-- see here;
#X msg 79 155 \; mydata sort;
#X text 189 162 <-- the same sorting as in scalars;
#X text 106 129 "sort";
#X text 352 442 [3] Change its color:;
#X text 85 441 [2] Use the radio buttons to select a square, f 25
;
#X text 73 313 ********************* For example: **********************
;
#X obj 397 536 mod 8;
#X obj 397 601 spigot;
#X obj 442 578 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 457 577 <-- try this;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 18 1;
#X connect 3 0 18 0;
#X connect 3 0 29 0;
#X connect 5 0 8 0;
#X connect 8 0 2 0;
#X connect 20 0 19 0;
#X connect 29 0 30 0;
#X connect 30 0 2 0;
#X connect 31 0 30 1;
#X restore 318 297 pd s accessing data;
#N canvas 622 154 526 281 s 0;
#X msg 372 125 \; mydata xaxis 20;
#X msg 13 122 \; mydata xaxis -20;
#X msg 197 54 \; mydata yaxis 20;
#X msg 194 187 \; mydata yaxis -20;
#X msg 173 122 \; mydata vis 0 \, vis 1;
#X text 154 101 (remap to get full dimen);
#X text 70 15 Click these to scroll (if canvas is scrollable);
#X restore 318 237 pd s scrolling the canvas;
#N canvas 526 49 520 326 s 0;
#X obj 173 124 route click;
#X obj 173 242 spigot;
#X obj 218 216 r editmode;
#X obj 173 97 inlet;
#X obj 173 267 s touched-pointer;
#X floatatom 250 181 5 0 0 0 y-pos - -, f 5;
#X obj 173 149 unpack p f;
#X obj 323 110 print touched;
#X text 141 22 Not all info from [struct] is obtained (not thoroughly
tested), f 35;
#X connect 0 0 6 0;
#X connect 0 1 7 0;
#X connect 1 0 4 0;
#X connect 2 0 1 1;
#X connect 3 0 0 0;
#X connect 6 0 1 0;
#X connect 6 1 5 0;
#X restore 318 387 pd s getting click info;
#N canvas 526 52 598 403 s 0;
#X obj 78 280 random 500;
#X obj 79 361 append mydata x y rgb;
#X msg 78 224 2 \, 1 \, 0;
#X obj 78 249 t b f;
#X obj 78 305 list prepend;
#X obj 78 330 route 0 1 2;
#X text 267 18 "append";
#X text 176 44 Just like in the scalar object:;
#X obj 244 329 r head-pointer;
#X msg 81 100 \; mydata send head-pointer;
#X text 370 329 <-- <target> is this;
#X obj 78 204 bng 15 250 50 0 empty append-some-stuff [2]_append-some-stuff
17 7 0 10 -262144 -1 -1;
#X obj 81 80 bng 15 250 50 0 empty empty [1]_send_pointer_to_<target>
17 7 0 10 -262144 -1 -1;
#X text 126 154 if you get an error \, try:;
#X msg 338 153 clear;
#X obj 338 178 s mydata;
#X text 391 153 and resend pointer;
#X text 291 240 NOTE: clearing also clears the <head-pointer>, f 25
;
#X connect 0 0 4 0;
#X connect 2 0 3 0;
#X connect 3 0 0 0;
#X connect 3 1 4 1;
#X connect 4 0 5 0;
#X connect 5 0 1 0;
#X connect 5 1 1 1;
#X connect 5 2 1 2;
#X connect 8 0 1 3;
#X connect 11 0 2 0;
#X connect 12 0 9 0;
#X connect 14 0 15 0;
#X restore 318 207 pd s append example;
#X text 28 42 A hack to the [scalar] object \, with some useful methods:
;
#X text 66 298 Get HEAD or ALL pointers in it:;
#X text 66 238 Scroll the canvas via messages:;
#X text 154 118 Set backround color:;
#X text 10 207 Appending stuff \, just like any scalar:;
#N canvas 530 67 733 501 s 0;
#X msg 385 241 \; mydata vis 0 \, setbounds 20 475 520 775 \, vis 1
, f 39;
#X msg 392 183 \; mydata vis 0;
#X msg 512 183 \; mydata vis 1;
#X msg 393 102 \; mydata clear;
#X msg 553 103 \; mydata delete;
#X text 566 82 Unmaps data;
#X text 387 154 (temporary shapes will be lost);
#X text 395 79 clear;
#X msg 387 306 \; mydata sort;
#X obj 221 161 r walter;
#X msg 57 160 \; mydata bind walter;
#X obj 221 186 print walter;
#X msg 58 242 \; mydata unbind;
#X text 24 135 Bind mouse X-Y to target;
#X text 40 220 Unbind current target;
#X text 52 288 Bind to new target;
#X msg 53 308 \; mydata bind ntarget;
#X obj 220 304 r ntarget;
#X obj 220 329 print ntarget;
#X text 15 68 Get in-patch dimensions to target;
#X msg 38 90 \; mydata getbounds walter;
#X text 198 13 Some of these are already used in this helpfile;
#X msg 200 410 read -c ../allmethods/back-methods.txt;
#X obj 200 435 text define -k methods;
#A set bind symbol \; unbind \; getbounds symbol \; motion float float
A_FLOAT \, \; send symbol \; flush symbol \; write symbol defsymbol
\, \; read symbol defsymbol \, \; mergefile symbol defsymbol \, \;
cursor symbol \; background symbol \; text float float symbol \; shape
symbol float float \, A_FLOAT \, A_FLOAT \, \; vis float \; clear \;
sort \; delete \; xaxis float \; yaxis float \;;
#X connect 9 0 11 0;
#X connect 17 0 18 0;
#X connect 22 0 23 0;
#X restore 318 357 pd s useful messages;
#X text 50 357 Canvas-type messages you can use:;
#N canvas 0 22 450 300 s 0;
#X obj 36 49 loadbang;
#X obj 121 49 r editmode;
#X obj 121 74 sel;
#X msg 36 134 \; mydata vis 0 \, setbounds 20 475 520 775 \, vis 1
\, background grey \; pd-s vis 0 \;, f 33;
#X text 89 113 NOTE: the setbounds on initialization;
#X connect 0 0 3 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X restore 33 529 pd s loadbang;
#X text 243 74 <-- back define <binding-name>;
#X text 186 148 Set cursor type:;
#X obj 318 458 struct mydata float x float y float rgb, f 29;
#X obj 123 458 filledpolygon rgb rgb 1 0 0 0 50 50 50 50 0, f 23;
#X text 101 387 Get some click information:;
#X text 36 428 The usual drawing instruction:;
#X text 332 431 struct name = <binding-name>;
#X text 207 534 see also back-help.pd \, fd_getfiles-help.pd;
#X text 50 177 Draw some basic data-free shapes:;
#X text 26 267 Setting stuff \, just like any scalar:;
#N canvas 526 48 595 335 s 0;
#X msg 143 225 \; mydata cursor \$1;
#X text 216 12 "cursor" method;
#X obj 284 74 loadbang;
#X obj 284 124 text;
#X obj 143 152 text get -s text t;
#X floatatom 143 92 5 0 0 0 - - -, f 5;
#X symbolatom 143 187 0 0 0 0 - - -;
#X msg 284 99 read cursor-types.txt \, bang;
#X text 85 292 https://www.tcl.tk/man/tcl8.4/TkCmd/cursors.htm;
#X text 111 51 chose one and hover <mydata>:, f 15;
#X msg 325 223 \; mydata vis 0 \, vis 1;
#X text 317 191 re-vising the canvas erases it;
#X connect 2 0 7 0;
#X connect 3 0 4 3;
#X connect 4 0 6 0;
#X connect 5 0 4 0;
#X connect 6 0 0 0;
#X connect 7 0 3 0;
#X restore 318 147 pd s temporary cursor;
#N canvas 526 48 602 318 s 0;
#X msg 15 57 \; mydata background [tk_chooseColor];
#X msg 16 155 \; mydata background blue;
#X msg 14 247 \; mydata background #FFF0F0;
#X text 18 220 or color HEX code:;
#X text 13 127 Also type a color name:;
#X text 14 30 Tk Color picker:;
#X msg 305 169 \; mydata vis 0 \, vis 1;
#X text 297 137 re-vising the canvas erases it;
#X restore 318 117 pd s temporary background;
#X text 234 16 "back define";
#N canvas 525 48 641 635 s 0;
#X obj 56 211 tgl 15 0 empty editmode empty 17 7 0 10 -262144 -1 -1
0 1;
#N canvas 0 22 491 504 s 0;
#X obj 159 264 sel;
#X obj 159 361 symbol;
#X msg 159 334 hand2;
#X msg 159 314 arrow;
#X msg 158 386 \; mydata cursor \$1 \;;
#X obj 186 226 s editmode;
#X obj 133 185 t f f f;
#X text 222 323 change cursor;
#X text 285 227 send flag;
#X obj 222 77 keyname;
#X obj 221 108 sel Escape;
#X msg 152 128 0;
#X obj 133 157 change;
#X obj 133 99 inlet;
#X obj 133 449 outlet;
#X text 40 29 Like scalar \, [back] doesn't allow for editmode \, so
here's a hack:, f 52;
#X connect 0 0 3 0;
#X connect 0 1 2 0;
#X connect 1 0 4 0;
#X connect 2 0 1 0;
#X connect 3 0 1 0;
#X connect 6 0 14 0;
#X connect 6 1 0 0;
#X connect 6 2 5 0;
#X connect 9 1 10 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 12 0 6 0;
#X connect 13 0 12 0;
#X restore 56 242 pd s fake edit mode;
#X msg 54 124 bang;
#X obj 54 159 s append-stuff;
#X obj 148 547 set mydata x y;
#X obj 357 407 r touched-pointer;
#X text 268 23 "set";
#X text 189 604 See the "getting click info" section;
#X text 49 46 Just as in the scalar object.;
#X text 220 242 <-- see here;
#X text 115 123 <-- [1] put some stuff on the canvas first;
#X text 81 209 <-- [2] enable a fake editmode (ESC key will disable
it);
#X text 161 344 [3] click on any square and move it. Press ESC when
done.;
#X obj 357 432 t b p;
#X text 47 84 ****** An example that lets you click an object and move
it: ******, f 67;
#X obj 56 267 sel;
#X msg 120 288 bind mousexy;
#X obj 66 356 r mousexy;
#X msg 56 292 unbind;
#X obj 56 317 s mydata;
#X obj 66 404 list split 2;
#X obj 188 466 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 127 497 spigot;
#X obj 232 386 r editmode;
#X obj 232 411 sel;
#X msg 232 436 0;
#X obj 395 489 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 232 291 <-- binding mouse to [r mousexy];
#X obj 130 449 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 118 427 sel 1;
#X obj 66 381 list split 1;
#X connect 0 0 1 0;
#X connect 1 0 15 0;
#X connect 2 0 3 0;
#X connect 5 0 13 0;
#X connect 13 0 26 0;
#X connect 13 0 21 0;
#X connect 13 1 4 2;
#X connect 15 0 18 0;
#X connect 15 1 16 0;
#X connect 16 0 19 0;
#X connect 17 0 30 0;
#X connect 18 0 19 0;
#X connect 20 0 22 0;
#X connect 20 1 29 0;
#X connect 21 0 22 1;
#X connect 22 0 4 0;
#X connect 23 0 24 0;
#X connect 24 0 25 0;
#X connect 25 0 21 0;
#X connect 29 0 28 0;
#X connect 30 1 20 0;
#X restore 318 267 pd s setting example;
#X text 10 327 Storing/Recalling data with textfiles:;
#N canvas 521 38 620 489 s 0;
#X obj 335 196 mainpath;
#X msg 335 171 add \$1;
#X msg 335 221 \; mydata write \$1;
#X obj 35 163 mainpath;
#X msg 35 138 add \$1;
#X obj 77 313 mainpath;
#X msg 77 288 add \$1;
#X msg 35 188 \; mydata read \$1;
#X obj 283 398 mainpath;
#X msg 77 338 \; mydata mergefile \$1;
#X text 218 28 write/read/merge;
#X msg 283 373 add \$1;
#X msg 283 423 \; mydata print \$1;
#X text 68 51 note: temporary elements (e.g the background) wont be
stored, f 62;
#X msg 35 93 symbol back-help-1.txt;
#X msg 35 113 symbol back-help-2.txt;
#X msg 77 243 symbol back-help-1.txt;
#X msg 77 263 symbol back-help-2.txt;
#X msg 335 126 symbol back-help-1.txt;
#X msg 335 146 symbol back-help-2.txt;
#X msg 283 328 symbol back-help-1.ps;
#X msg 283 348 symbol back-help-2.ps;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 3 0 7 0;
#X connect 4 0 3 0;
#X connect 5 0 9 0;
#X connect 6 0 5 0;
#X connect 8 0 12 0;
#X connect 11 0 8 0;
#X connect 14 0 4 0;
#X connect 15 0 4 0;
#X connect 16 0 6 0;
#X connect 17 0 6 0;
#X connect 18 0 1 0;
#X connect 19 0 1 0;
#X connect 20 0 11 0;
#X connect 21 0 11 0;
#X restore 318 327 pd s storing the data;
#X connect 16 0 4 0;
