#N canvas 524 51 594 587 12;
#X obj 88 75 back define mydata;
#N canvas 527 53 661 451 s 0;
#X msg 25 40 \; mydata shape oval 100 100 200 200;
#X msg 25 200 \; mydata shape line 100 100 200 200;
#X text 49 10 This creates temporary and uneditable shapes;
#X msg 27 400 mydata vis 1 \, text 10 10 sometext;
#X msg 25 120 \; mydata shape rectangle 200 200 300 300 200;
#X msg 25 292 \; mydata shape polygon 100 100 200 200;
#X text 51 260 not working;
#X text 51 371 crashes on some systems:;
#X msg 365 239 \; mydata vis 0 \, vis 1;
#X text 357 207 re-vising the canvas erases it;
#X msg 366 321 \; mydata delete;
#X text 363 290 also this will delete temp shapes;
#X restore 318 177 pd s temporary shapes;
#N canvas 525 52 640 702 s 0;
#X obj 281 508 r itpoint;
#X msg 303 549 clear;
#X obj 281 582 fd_list-pointer;
#X floatatom 156 588 5 0 0 0 change_color - -, f 5;
#X msg 80 240 \; mydata flush itpoint;
#X obj 155 546 hradio 15 1 0 8 empty empty empty 0 -8 0 10 -262144
-1 -1 6;
#X msg 81 81 \; mydata send itpoint;
#X text 278 265 (It will post how many it found);
#X floatatom 155 517 5 0 0 0 index - -, f 5;
#X text 108 53 "send";
#X text 104 218 "flush";
#X text 241 79 <-- sends 'head of the list' pointer (aka traverse)
to <target>, f 36;
#X text 247 247 <-- sends ALL found pointers to <target>;
#X text 366 508 <-- <target> is this;
#X text 413 584 <-- store pointers;
#X text 212 16 Access the data pointers;
#X text 353 614 (see fd_list-pointer-help);
#X text 348 548 <-- must flush again afterwards;
#X obj 156 629 set mydata rgb;
#N canvas 488 196 450 300 s 0;
#X obj 16 22 inlet;
#X obj 50 178 s append-some-stuff;
#X obj 50 114 until;
#X msg 120 105 \; itpoint clear \; mydata clear \, delete \, send head-pointer
;
#X obj 16 47 t b b b;
#X msg 50 89 8;
#X text 166 78 first we clear everything;
#X text 213 175 <-- then we draw;
#X text 48 221 then we sort and flush;
#X msg 16 241 \; mydata sort \, flush itpoint;
#X obj 83 27 r append-stuff;
#X connect 0 0 4 0;
#X connect 2 0 1 0;
#X connect 4 0 9 0;
#X connect 4 1 5 0;
#X connect 4 2 3 0;
#X connect 5 0 2 0;
#X connect 10 0 4 0;
#X restore 84 394 pd s append-some-stuff;
#X msg 84 344 bang;
#X text 136 343 [1] bang until you have some visible shapes);
#X text 272 392 <-- see here;
#X msg 79 155 \; mydata sort;
#X text 189 162 <-- the same sorting as in scalars;
#X text 106 129 "sort";
#X text 138 469 [3] Change its color:;
#X text 138 435 [2] Use the radio buttons to select a square;
#X text 73 313 ********************* For example: **********************
;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 18 1;
#X connect 3 0 18 0;
#X connect 5 0 2 0;
#X connect 8 0 5 0;
#X connect 20 0 19 0;
#X restore 318 297 pd s accessing data;
#N canvas 622 154 526 281 s 0;
#X msg 372 125 \; mydata xaxis 20;
#X msg 13 122 \; mydata xaxis -20;
#X msg 197 54 \; mydata yaxis 20;
#X msg 194 187 \; mydata yaxis -20;
#X msg 173 122 \; mydata vis 0 \, vis 1;
#X text 154 101 (remap to get full dimen);
#X text 70 15 Click these to scroll (if canvas is scrollable);
#X restore 318 237 pd s scrolling the canvas;
#N canvas 527 54 520 326 s 0;
#X obj 173 124 route click;
#X obj 173 242 spigot;
#X obj 218 216 r editmode;
#X obj 173 97 inlet;
#X obj 173 267 s touched-pointer;
#X floatatom 250 181 5 0 0 0 y-pos - -, f 5;
#X obj 173 149 unpack p f;
#X obj 323 110 print touched;
#X text 141 22 Not all info from [struct] is obtained (not thoroughly
tested), f 35;
#X connect 0 0 6 0;
#X connect 0 1 7 0;
#X connect 1 0 4 0;
#X connect 2 0 1 1;
#X connect 3 0 0 0;
#X connect 6 0 1 0;
#X connect 6 1 5 0;
#X restore 318 357 pd s getting click info;
#N canvas 526 52 598 403 s 0;
#X obj 78 280 random 500;
#X obj 79 361 append mydata x y rgb;
#X msg 78 224 2 \, 1 \, 0;
#X obj 78 249 t b f;
#X obj 78 305 list prepend;
#X obj 78 330 route 0 1 2;
#X text 267 18 "append";
#X text 176 44 Just like in the scalar object:;
#X obj 244 329 r head-pointer;
#X msg 81 100 \; mydata send head-pointer;
#X text 370 329 <-- <target> is this;
#X obj 78 204 bng 15 250 50 0 empty append-some-stuff [2]_append-some-stuff
17 7 0 10 -262144 -1 -1;
#X obj 81 80 bng 15 250 50 0 empty empty [1]_send_pointer_to_<target>
17 7 0 10 -262144 -1 -1;
#X text 126 154 if you get an error \, try:;
#X msg 338 153 clear;
#X obj 338 178 s mydata;
#X text 391 153 and resend pointer;
#X text 291 240 NOTE: clearing also clears the <head-pointer>, f 25
;
#X connect 0 0 4 0;
#X connect 2 0 3 0;
#X connect 3 0 0 0;
#X connect 3 1 4 1;
#X connect 4 0 5 0;
#X connect 5 0 1 0;
#X connect 5 1 1 1;
#X connect 5 2 1 2;
#X connect 8 0 1 3;
#X connect 11 0 2 0;
#X connect 12 0 9 0;
#X connect 14 0 15 0;
#X restore 318 207 pd s append example;
#X text 28 42 A hack to the [scalar] object \, with some useful methods:
;
#X text 66 298 Get HEAD or ALL pointers in it:;
#X text 66 238 Scroll the canvas via messages:;
#X text 154 118 Set backround color:;
#X text 10 207 Appending stuff \, just like any scalar:;
#N canvas 530 67 705 707 s 0;
#X msg 31 175 \; mydata vis 0 \, setbounds 20 475 520 775 \, vis 1
;
#X msg 33 117 \; mydata vis 0;
#X msg 153 117 \; mydata vis 1;
#X msg 34 36 \; mydata clear;
#X msg 194 37 \; mydata delete;
#X text 207 16 Unmaps data;
#X text 186 83 (temporary shapes will be lost);
#X text 36 13 clear;
#X msg 34 221 \; mydata sort;
#X obj 343 380 mainpath;
#X msg 343 355 add \$1;
#X msg 343 405 \; mydata write \$1;
#X msg 343 310 symbol back-object-help-1.txt;
#X msg 343 330 symbol back-object-help-2.txt;
#X obj 36 381 mainpath;
#X msg 36 356 add \$1;
#X msg 36 311 symbol back-object-help-1.txt;
#X msg 36 331 symbol back-object-help-2.txt;
#X obj 191 531 mainpath;
#X msg 191 506 add \$1;
#X msg 191 461 symbol back-object-help-1.txt;
#X msg 191 481 symbol back-object-help-2.txt;
#X msg 36 406 \; mydata read \$1;
#X obj 397 616 mainpath;
#X msg 397 591 append \$1;
#X msg 397 546 symbol back-object-help-1.ps;
#X msg 397 566 symbol back-object-help-2.ps;
#X msg 397 641 \; mydata print \$1 \$2;
#X msg 191 556 \; mydata mergefile \$1;
#X text 238 271 write/read/merge;
#X connect 9 0 11 0;
#X connect 10 0 9 0;
#X connect 12 0 10 0;
#X connect 13 0 10 0;
#X connect 14 0 22 0;
#X connect 15 0 14 0;
#X connect 16 0 15 0;
#X connect 17 0 15 0;
#X connect 18 0 28 0;
#X connect 19 0 18 0;
#X connect 20 0 19 0;
#X connect 21 0 19 0;
#X connect 23 0 27 0;
#X connect 24 0 23 0;
#X connect 25 0 24 0;
#X connect 26 0 24 0;
#X restore 318 327 pd s useful messages;
#X text 50 327 Canvas-type messages you can use:;
#N canvas 0 22 450 300 s 0;
#X obj 36 49 loadbang;
#X obj 121 49 r editmode;
#X obj 121 74 sel;
#X msg 36 134 \; mydata vis 0 \, setbounds 20 475 520 775 \, vis 1
\, background grey \; pd-s vis 0 \;, f 33;
#X text 89 113 NOTE: the setbounds on initialization;
#X connect 0 0 3 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X restore 33 529 pd s loadbang;
#X text 243 74 <-- back define <binding-name>;
#X text 186 148 Set cursor type:;
#X obj 318 428 struct mydata float x float y float rgb, f 29;
#X obj 123 428 filledpolygon rgb rgb 1 0 0 0 50 50 50 50 0, f 23;
#X text 101 357 Get some click information:;
#X text 36 398 The usual drawing instruction:;
#X text 332 401 struct name = <binding-name>;
#X text 207 534 see also back-help.pd \, fd_getfiles-help.pd;
#X text 50 177 Draw some basic data-free shapes:;
#X text 26 267 Setting stuff \, just like any scalar:;
#N canvas 526 48 595 335 s 0;
#X msg 143 225 \; mydata cursor \$1;
#X text 216 12 "cursor" method;
#X obj 284 74 loadbang;
#X obj 284 124 text;
#X obj 143 152 text get -s text t;
#X floatatom 143 92 5 0 0 0 - - -, f 5;
#X symbolatom 143 187 0 0 0 0 - - -;
#X msg 284 99 read cursor-types.txt \, bang;
#X text 85 292 https://www.tcl.tk/man/tcl8.4/TkCmd/cursors.htm;
#X text 111 51 chose one and hover <mydata>:, f 15;
#X msg 325 223 \; mydata vis 0 \, vis 1;
#X text 317 191 re-vising the canvas erases it;
#X connect 2 0 7 0;
#X connect 3 0 4 3;
#X connect 4 0 6 0;
#X connect 5 0 4 0;
#X connect 6 0 0 0;
#X connect 7 0 3 0;
#X restore 318 147 pd s temporary cursor;
#N canvas 526 48 602 318 s 0;
#X msg 15 57 \; mydata background [tk_chooseColor];
#X msg 16 155 \; mydata background blue;
#X msg 14 247 \; mydata background #FFF0F0;
#X text 18 220 or color HEX code:;
#X text 13 127 Also type a color name:;
#X text 14 30 Tk Color picker:;
#X msg 305 169 \; mydata vis 0 \, vis 1;
#X text 297 137 re-vising the canvas erases it;
#X restore 318 117 pd s temporary background;
#X text 234 16 "back define";
#N canvas 525 54 631 533 s 0;
#X obj 56 211 tgl 15 0 empty editmode empty 17 7 0 10 -262144 -1 -1
0 1;
#N canvas 0 22 491 504 s 0;
#X obj 159 264 sel;
#X obj 159 361 symbol;
#X msg 159 334 hand2;
#X msg 159 314 arrow;
#X msg 158 386 \; mydata cursor \$1 \;;
#X obj 186 226 s editmode;
#X obj 133 185 t f f f;
#X text 222 323 change cursor;
#X text 285 227 send flag;
#X obj 222 77 keyname;
#X obj 221 108 sel Escape;
#X msg 152 128 0;
#X obj 133 157 change;
#X obj 133 99 inlet;
#X obj 133 449 outlet;
#X text 40 29 Like scalar \, [back] doesn't allow for editmode \, so
here's a hack:, f 52;
#X connect 0 0 3 0;
#X connect 0 1 2 0;
#X connect 1 0 4 0;
#X connect 2 0 1 0;
#X connect 3 0 1 0;
#X connect 6 0 14 0;
#X connect 6 1 0 0;
#X connect 6 2 5 0;
#X connect 9 1 10 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 12 0 6 0;
#X connect 13 0 12 0;
#X restore 56 242 pd s fake edit mode;
#X msg 54 124 bang;
#X obj 54 159 s append-stuff;
#X obj 56 455 set mydata x y;
#X obj 141 371 r touched-pointer;
#X text 268 23 "set";
#X text 195 445 See the "getting click info" section;
#X text 49 46 Just as in the scalar object.;
#X text 220 242 <-- see here;
#X text 346 287 <-- see here;
#X text 115 123 <-- [1] put some stuff on the canvas first;
#X text 81 209 <-- [2] enable a fake editmode (ESC key will disable
it);
#X text 114 343 [3] click on any square and move it. Press ESC when
done.;
#X obj 141 396 t b p;
#N canvas 0 22 450 300 s 0;
#X obj 51 198 spigot;
#X msg 178 169 1;
#X obj 119 98 r editmode;
#X obj 119 123 sel;
#X msg 119 148 0;
#X obj 51 127 inlet;
#X obj 51 227 outlet;
#X obj 250 196 inlet;
#X connect 0 0 6 0;
#X connect 1 0 0 1;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 0 1;
#X connect 5 0 0 0;
#X connect 7 0 1 0;
#X restore 56 422 pd s spigot;
#N canvas 377 52 697 622 cyclone/mousestate 0;
#X obj 187 265 cyclone/mousestate;
#X msg 327 221 poll;
#X msg 265 221 nopoll;
#X obj 187 194 loadbang;
#X msg 187 219 mode 0;
#X obj 235 312 spigot;
#X obj 235 289 pack;
#X obj 187 313 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 187 289 sel 1;
#X obj 265 172 sel;
#X obj 235 428 unpack;
#X obj 295 378 r mydata;
#X obj 295 403 route setbounds;
#X obj 235 453 - 22;
#X obj 286 453 -;
#X obj 295 428 unpack;
#X obj 286 478 - 22;
#X obj 235 479 pack;
#X text 293 304 <-- toggle mouse xy;
#X text 266 353 Must set dimensions beforehand (via "setbounds");
#X text 324 452 <-- or hard-code them here;
#X obj 235 544 outlet;
#X text 91 38 Here we get mouse xy from the cyclone/mousestate \, so
we can grab the 'touched' shape (because we received its pointer via
<touched-pointer>) \, and move it around.;
#X obj 265 121 inlet;
#X connect 0 0 8 0;
#X connect 0 1 6 0;
#X connect 0 2 6 1;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 4 0;
#X connect 4 0 0 0;
#X connect 5 0 10 0;
#X connect 6 0 5 0;
#X connect 7 0 5 1;
#X connect 8 0 7 0;
#X connect 9 0 2 0;
#X connect 9 1 1 0;
#X connect 10 0 13 0;
#X connect 10 1 14 0;
#X connect 11 0 12 0;
#X connect 12 0 15 0;
#X connect 13 0 17 0;
#X connect 14 0 16 0;
#X connect 15 0 13 1;
#X connect 15 1 14 1;
#X connect 16 0 17 1;
#X connect 17 0 21 0;
#X connect 23 0 9 0;
#X restore 56 289 pd cyclone/mousestate for mouse x y;
#X text 47 84 ****** An example that lets you click an object and move
it: ******, f 67;
#X connect 0 0 1 0;
#X connect 1 0 16 0;
#X connect 2 0 3 0;
#X connect 5 0 14 0;
#X connect 14 0 15 1;
#X connect 14 1 4 2;
#X connect 15 0 4 0;
#X connect 16 0 15 0;
#X restore 318 267 pd s setting example;
#X connect 16 0 4 0;
