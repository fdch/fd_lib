#N canvas 526 52 566 397 12;
#X text 216 18 "cuadratic";
#X obj 384 327 dac~;
#N canvas 0 23 540 319 s 0;
#X obj 43 104 cuadratic;
#X obj 43 158 vline~;
#X obj 43 79 metro 0.022;
#X obj 43 130 fd_norm;
#X obj 43 221 *~ 0.1;
#X obj 112 226 fd_switch;
#X obj 181 253 switch~;
#X obj 43 246 *~;
#X obj 43 26 inlet;
#X obj 43 52 t f f;
#X floatatom 128 23 5 0 0 0 - - -, f 5;
#X text 159 60 This is simply: banging [cuadratic] very fast \; normalizing
between 0-1 \; and turing its output into signal \; using [vline~]
;
#X obj 43 274 outlet~;
#X text 176 20 <-- try different speeds (shift + scroll);
#X floatatom 57 191 5 0 10 0 - - -, f 5;
#X msg 354 208 -1.3;
#X msg 399 208 -2;
#X msg 353 238 initc \$1;
#X msg 438 281 reset;
#X connect 0 0 3 0;
#X connect 1 0 4 0;
#X connect 2 0 0 0;
#X connect 3 0 1 0;
#X connect 4 0 7 0;
#X connect 5 0 7 1;
#X connect 5 1 6 0;
#X connect 7 0 12 0;
#X connect 8 0 9 0;
#X connect 9 0 2 0;
#X connect 9 1 5 0;
#X connect 10 0 2 1;
#X connect 14 0 4 1;
#X connect 15 0 17 0;
#X connect 16 0 17 0;
#X connect 17 0 0 0;
#X connect 18 0 0 0;
#X restore 384 292 pd s noise;
#X obj 384 262 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 404 259 <-- try this;
#X text 252 256 See here:;
#X msg 45 97 bang;
#X obj 45 283 cuadratic;
#X obj 45 342 print -n;
#X msg 76 177 x 1.97 \, c -2;
#X msg 96 213 reset;
#X text 128 131 <-- outputs N iterations as list (y \, n);
#X text 154 213 <-- reset internal state to default;
#X text 100 96 <-- advances one step and outputs float (y);
#N canvas 0 23 450 300 s 0;
#X obj 17 83 cuadratic;
#N canvas 0 22 450 278 (subpatch) 0;
#X array cuadratic-help 100 float 5;
#A 0 -0.821631 0.349866 -0.755342 0.140818 -0.960469 0.844651 0.426569
-0.636246 -0.190606 -0.927471 0.72007 0.0367504 -0.997423 0.989335
0.957201 0.832118 0.384546 -0.704409 -0.00786089 -1 0.999629 0.998147
0.992225 0.968655 0.876229 0.535242 -0.427226 -0.635124 -0.193458 -0.925281
0.711955 0.013511 -0.999758 0.998664 0.994288 0.97685 0.908112 0.649006
-0.157811 -0.950321 0.805874 0.298582 -0.821843 0.350561 -0.754367
0.137876 -0.962109 0.850953 0.447941 -0.598871 -0.28292 -0.840056 0.411091
-0.662174 -0.123283 -0.96973 0.880397 0.549881 -0.39546 -0.687386 -0.0552419
-0.994021 0.975788 0.903964 0.633978 -0.196367 -0.923013 0.703572 -0.010219
-0.999915 0.999288 0.996784 0.986788 0.947136 0.793787 0.259918 -0.865026
0.496231 -0.507694 -0.484681 -0.53035 -0.437651 -0.617093 -0.238609
-0.886269 0.570627 -0.348974 -0.756588 0.144586 -0.958318 0.836398
0.398825 -0.68204 -0.0698821 -0.990358 0.961251 0.847655 0.436738 -0.61869
-0.234664;
#X coords 0 1 99 -1 200 140 1 0 0;
#X restore 220 104 graph;
#X obj 17 132 array set cuadratic-help, f 14;
#X text 39 182 NOTE: the output is not normalized, f 17;
#X text 104 23 <-- outputs N iterations as list (y \, n);
#X msg 26 227 normalize;
#X obj 26 252 s cuadratic-help;
#X msg 17 25 100;
#X connect 0 0 2 0;
#X connect 5 0 6 0;
#X connect 7 0 0 0;
#X restore 252 281 pd s graph;
#N canvas 0 23 450 300 s 0;
#X text 108 25 just this help file's init;
#X obj 225 78 loadbang;
#X msg 225 103 \; pd-s vis 0 \;;
#X connect 1 0 2 0;
#X restore 252 331 pd s init;
#N canvas 525 51 450 300 s 0;
#X text 58 55 possible ranges (not very well tested):;
#X text 234 102 c: -2 ... -0.97;
#X floatatom 61 130 5 0 0 0 - - -, f 5;
#X msg 61 152 x \$1 \, bang;
#X obj 61 225 cuadratic;
#X obj 61 250 print -n;
#X text 149 17 x1 = x^2 + c;
#X floatatom 221 125 5 0 0 0 - - -, f 5;
#X msg 221 147 c \$1 \, bang;
#X text 58 94 x: (actual x);
#X msg 73 178 reset;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 7 0 8 0;
#X connect 8 0 4 0;
#X connect 10 0 4 0;
#X restore 252 306 pd s variable;
#X text 189 176 <-- X and coefficient C;
#X text 104 49 Computes this equation: x1 = x^2 + c;
#X text 253 365 see also cuadratic-test.pd;
#X msg 58 132 5;
#X msg 103 242 print;
#X text 158 242 <-- info;
#X connect 2 0 1 0;
#X connect 2 0 1 1;
#X connect 3 0 2 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 9 0 7 0;
#X connect 10 0 7 0;
#X connect 20 0 7 0;
#X connect 21 0 7 0;
