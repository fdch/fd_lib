#N canvas 526 52 566 397 12;
#X text 216 18 "cuadratic";
#X obj 384 327 dac~;
#N canvas 0 22 540 319 s 0;
#X obj 43 104 cuadratic;
#X obj 43 158 vline~;
#X obj 43 79 metro 0.022;
#X obj 43 130 fd_norm;
#X obj 43 221 *~ 0.1;
#X obj 112 226 fd_switch;
#X obj 181 253 switch~;
#X obj 43 246 *~;
#X obj 43 26 inlet;
#X obj 43 52 t f f;
#X floatatom 128 23 5 0 0 0 - - -, f 5;
#X text 159 60 This is simply: banging [cuadratic] very fast \; normalizing
between 0-1 \; and turing its output into signal \; using [vline~]
;
#X obj 43 274 outlet~;
#X text 176 20 <-- try different speeds (shift + scroll);
#X floatatom 57 191 5 0 10 0 - - -, f 5;
#X msg 354 208 -1.3;
#X msg 399 208 -2;
#X msg 353 238 initc \$1;
#X msg 438 281 reset;
#X connect 0 0 3 0;
#X connect 1 0 4 0;
#X connect 2 0 0 0;
#X connect 3 0 1 0;
#X connect 4 0 7 0;
#X connect 5 0 7 1;
#X connect 5 1 6 0;
#X connect 7 0 12 0;
#X connect 8 0 9 0;
#X connect 9 0 2 0;
#X connect 9 1 5 0;
#X connect 10 0 2 1;
#X connect 14 0 4 1;
#X connect 15 0 17 0;
#X connect 16 0 17 0;
#X connect 17 0 0 0;
#X connect 18 0 0 0;
#X restore 384 292 pd s noise;
#X obj 384 262 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 404 259 <-- try this;
#X text 252 256 See here:;
#X msg 45 97 bang;
#X obj 45 253 cuadratic;
#X obj 45 312 print -n;
#X msg 76 177 x 1.97 \, c -2;
#X msg 96 213 reset;
#X text 128 131 <-- outputs N iterations as list (y \, n);
#X text 154 213 <-- reset internal state to default;
#X text 100 96 <-- advances one step and outputs float (y);
#N canvas 0 22 450 300 s 0;
#X obj 17 83 cuadratic;
#N canvas 0 22 450 278 (subpatch) 0;
#X array cuadratic-help 100 float 5;
#A 0 -0.992964 0.970409 0.881885 0.554112 -0.38676 -0.70151 -0.0168011
-0.999956 0.998264 0.991505 0.964621 0.859499 0.476188 -0.547246 -0.401875
-0.677681 -0.0824956 -0.986917 0.946475 0.790176 0.247586 -0.877987
0.5404 -0.416761 -0.653322 -0.147306 -0.957145 0.83078 0.379152 -0.713158
0.0161399 -1 0.998438 0.9922 0.967376 0.870139 0.512974 -0.474511 -0.550434
-0.39488 -0.688822 -0.052062 -0.995103 0.978907 0.915 0.673058 -0.0949787
-0.982488 0.929041 0.724814 0.0496422 -0.995595 0.980865 0.922669 0.701229
-0.0175883 -0.999902 0.998048 0.990642 0.961201 0.846331 0.431287 -0.628697
-0.210412 -0.912021 0.662176 -0.124022 -0.969774 0.879422 0.545442
-0.405817 -0.671318 -0.0996549 -0.980669 0.921901 0.698398 -0.025509
-0.99922 0.995321 0.979776 0.918404 0.685531 -0.0611031 -0.993057 0.970779
0.883322 0.559181 -0.375479 -0.718698 0.0319948 -0.998474 0.992344
0.967948 0.872349 0.520672 -0.458604 -0.580104 -0.327829 -0.785689
0.23345;
#X coords 0 1 99 -1 200 140 1 0 0;
#X restore 220 104 graph;
#X msg 17 25 print 100;
#X obj 17 132 array set cuadratic-help, f 14;
#X text 39 182 NOTE: the output is not normalized, f 17;
#X text 104 23 <-- outputs N iterations as list (y \, n);
#X msg 26 227 normalize;
#X obj 26 252 s cuadratic-help;
#X connect 0 0 3 0;
#X connect 2 0 0 0;
#X connect 6 0 7 0;
#X restore 252 281 pd s graph;
#X msg 58 132 print 5;
#N canvas 0 22 450 300 s 0;
#X text 108 25 just this help file's init;
#X obj 225 78 loadbang;
#X msg 225 103 \; pd-s vis 0 \;;
#X connect 1 0 2 0;
#X restore 252 331 pd s init;
#N canvas 525 51 450 300 s 0;
#X text 58 55 possible ranges (not very well tested):;
#X text 234 102 c: -2 ... -0.97;
#X floatatom 61 130 5 0 0 0 - - -, f 5;
#X msg 61 152 x \$1 \, bang;
#X obj 61 225 cuadratic;
#X obj 61 250 print -n;
#X text 149 17 x1 = x^2 + c;
#X floatatom 221 125 5 0 0 0 - - -, f 5;
#X msg 221 147 c \$1 \, bang;
#X text 58 94 x: (actual x);
#X msg 73 178 reset;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 7 0 8 0;
#X connect 8 0 4 0;
#X connect 10 0 4 0;
#X restore 252 306 pd s variable;
#X text 189 176 <-- X and coefficient C;
#X text 104 49 Computes this equation: x1 = x^2 + c;
#X text 253 365 see also cuadratic-test.pd;
#X connect 2 0 1 0;
#X connect 2 0 1 1;
#X connect 3 0 2 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 9 0 7 0;
#X connect 10 0 7 0;
#X connect 15 0 7 0;
