#N canvas 525 52 562 273 12;
#N canvas 533 149 450 300 child 0;
#X msg 31 55 bang;
#X obj 31 205 t b a;
#X msg 31 230 vis 1;
#X obj 31 255 s;
#X obj 31 89 root;
#X msg 51 130 bang;
#X text 279 214 even more:;
#X text 83 53 <-- inside (this) child subpatch;
#N canvas 0 22 450 300 granchild 0;
#X msg 22 27 bang;
#X obj 22 207 t b a;
#X msg 22 232 vis 1;
#X obj 22 257 s;
#X obj 22 61 root;
#X msg 42 102 bang;
#X text 183 137 <-- inside abstraction;
#X text 74 25 <-- inside (this) grandchild subpatch;
#X obj 42 137 dummy root;
#X connect 0 0 4 0;
#X connect 1 0 2 0;
#X connect 1 1 3 1;
#X connect 2 0 3 0;
#X connect 4 0 1 0;
#X connect 5 0 8 0;
#X connect 8 0 1 0;
#X restore 284 240 pd granchild;
#X obj 51 165 dummy root;
#X text 90 229 (vising it);
#X text 140 165 <-- inside an abstraction;
#X text 29 13 Clicking on the bangs will make the root visible.;
#N canvas 0 22 450 300 warning 0;
#X text 14 30 Be careful because you can cause Pd to crash...;
#X text 14 71 If you send \, for example \, a 'clear' message \, you'll
clear the root \, and possibly crash pd!!, f 51;
#X text 17 130 Choose non-destructive messages instead.;
#X restore 284 264 pd warning;
#X connect 0 0 4 0;
#X connect 1 0 2 0;
#X connect 1 1 3 1;
#X connect 2 0 3 0;
#X connect 4 0 1 0;
#X connect 5 0 9 0;
#X connect 9 0 1 0;
#X restore 232 195 pd child;
#X text 238 13 "root";
#X text 36 48 Get the root canvas from inside a subpatch or abstraction.
;
#X text 37 77 The outcome is a symbol in tk namespace (i.e. \, '.x60b060')
\, which is pd's inner way to refer to canvases. You can use it as
a target to a [send <target>] object.;
#X text 218 158 For example:;
