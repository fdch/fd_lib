%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Federico Camara Halac
%%Title: Window .x603e10.c
%%CreationDate: Fri May 19 17:25:40 2017
%%BoundingBox: 80 278 532 515
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
1.001 1.001 scale
-225 -117 translate
0 235 moveto 450 235 lineto 450 0 lineto 0 0 lineto closepath clip newpath
gsave
0 225 moveto
0 25 lineto
5 25 lineto
5 225 lineto
0 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
0 225 moveto
0 25 lineto
5 25 lineto
5 225 lineto
0 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
1 225 moveto
1 25 lineto
6 25 lineto
6 225 lineto
1 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
1 225 moveto
1 25 lineto
6 25 lineto
6 225 lineto
1 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
4 225 moveto
4 25 lineto
9 25 lineto
9 225 lineto
4 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
4 225 moveto
4 25 lineto
9 25 lineto
9 225 lineto
4 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
6 225 moveto
6 25 lineto
11 25 lineto
11 225 lineto
6 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
6 225 moveto
6 25 lineto
11 25 lineto
11 225 lineto
6 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
9 225 moveto
9 25 lineto
14 25 lineto
14 225 lineto
9 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
9 225 moveto
9 25 lineto
14 25 lineto
14 225 lineto
9 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
12 225 moveto
12 25 lineto
17 25 lineto
17 225 lineto
12 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
12 225 moveto
12 25 lineto
17 25 lineto
17 225 lineto
12 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
14 225 moveto
14 25 lineto
19 25 lineto
19 225 lineto
14 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
14 225 moveto
14 25 lineto
19 25 lineto
19 225 lineto
14 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
16 225 moveto
16 25 lineto
21 25 lineto
21 225 lineto
16 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
16 225 moveto
16 25 lineto
21 25 lineto
21 225 lineto
16 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
21 225 moveto
21 25 lineto
26 25 lineto
26 225 lineto
21 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
21 225 moveto
21 25 lineto
26 25 lineto
26 225 lineto
21 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
25 225 moveto
25 25 lineto
30 25 lineto
30 225 lineto
25 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
25 225 moveto
25 25 lineto
30 25 lineto
30 225 lineto
25 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
29 225 moveto
29 25 lineto
34 25 lineto
34 225 lineto
29 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
29 225 moveto
29 25 lineto
34 25 lineto
34 225 lineto
29 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
32 225 moveto
32 25 lineto
37 25 lineto
37 225 lineto
32 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
32 225 moveto
32 25 lineto
37 25 lineto
37 225 lineto
32 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
36 225 moveto
36 25 lineto
41 25 lineto
41 225 lineto
36 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
36 225 moveto
36 25 lineto
41 25 lineto
41 225 lineto
36 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
41 225 moveto
41 25 lineto
46 25 lineto
46 225 lineto
41 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
41 225 moveto
41 25 lineto
46 25 lineto
46 225 lineto
41 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
48 225 moveto
48 25 lineto
53 25 lineto
53 225 lineto
48 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
48 225 moveto
48 25 lineto
53 25 lineto
53 225 lineto
48 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
52 225 moveto
52 25 lineto
57 25 lineto
57 225 lineto
52 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
52 225 moveto
52 25 lineto
57 25 lineto
57 225 lineto
52 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
57 225 moveto
57 25 lineto
62 25 lineto
62 225 lineto
57 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
57 225 moveto
57 25 lineto
62 25 lineto
62 225 lineto
57 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
59 225 moveto
59 25 lineto
64 25 lineto
64 225 lineto
59 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
59 225 moveto
59 25 lineto
64 25 lineto
64 225 lineto
59 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
62 225 moveto
62 25 lineto
67 25 lineto
67 225 lineto
62 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
62 225 moveto
62 25 lineto
67 25 lineto
67 225 lineto
62 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
65 225 moveto
65 25 lineto
70 25 lineto
70 225 lineto
65 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
65 225 moveto
65 25 lineto
70 25 lineto
70 225 lineto
65 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
71 225 moveto
71 25 lineto
76 25 lineto
76 225 lineto
71 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
71 225 moveto
71 25 lineto
76 25 lineto
76 225 lineto
71 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
75 225 moveto
75 25 lineto
80 25 lineto
80 225 lineto
75 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
75 225 moveto
75 25 lineto
80 25 lineto
80 225 lineto
75 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
79 225 moveto
79 25 lineto
84 25 lineto
84 225 lineto
79 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
79 225 moveto
79 25 lineto
84 25 lineto
84 225 lineto
79 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
81 225 moveto
81 25 lineto
86 25 lineto
86 225 lineto
81 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
81 225 moveto
81 25 lineto
86 25 lineto
86 225 lineto
81 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
84 225 moveto
84 25 lineto
89 25 lineto
89 225 lineto
84 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
84 225 moveto
84 25 lineto
89 25 lineto
89 225 lineto
84 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
87 225 moveto
87 25 lineto
92 25 lineto
92 225 lineto
87 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
87 225 moveto
87 25 lineto
92 25 lineto
92 225 lineto
87 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
91 225 moveto
91 25 lineto
96 25 lineto
96 225 lineto
91 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
91 225 moveto
91 25 lineto
96 25 lineto
96 225 lineto
91 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
94 225 moveto
94 25 lineto
99 25 lineto
99 225 lineto
94 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
94 225 moveto
94 25 lineto
99 25 lineto
99 225 lineto
94 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
97 225 moveto
97 25 lineto
102 25 lineto
102 225 lineto
97 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
97 225 moveto
97 25 lineto
102 25 lineto
102 225 lineto
97 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
98 225 moveto
98 25 lineto
103 25 lineto
103 225 lineto
98 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
98 225 moveto
98 25 lineto
103 25 lineto
103 225 lineto
98 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
99 225 moveto
99 25 lineto
104 25 lineto
104 225 lineto
99 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
99 225 moveto
99 25 lineto
104 25 lineto
104 225 lineto
99 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
100 225 moveto
100 25 lineto
105 25 lineto
105 225 lineto
100 225 lineto
0.000 0.000 0.000 setrgbcolor AdjustColor
eofill
100 225 moveto
100 25 lineto
105 25 lineto
105 225 lineto
100 225 lineto
1 setlinejoin 1 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
restore showpage

%%Trailer
end
%%EOF
